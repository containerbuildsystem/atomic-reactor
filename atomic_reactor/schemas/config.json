{
  "$schema": "http://json-schema.org/draft-04/schema#",

  "title": "atomic-reactor server-side configuration",

  "type": ["object", "null"],
  "properties": {
    "version": {
      "type": "integer"
    },

    "koji": {
        "description": "Koji instance",
        "type": "object",
        "properties": {
            "hub_url": {
                "description": "Koji hub's xmlrpc url",
                "type": "string"
            },
            "root_url": {
                "description": "Koji's root storage url",
                "type": "string"
            },
            "auth": {
                "description": "Authentication information",
                "type": "object",
                "anyOf": [
                    {
                        "properties": {
                            "proxyuser": {"$ref": "#/definitions/proxyuser"},
                            "ssl_certs_dir": {
                                "description": "Path to directory with cert and ca files",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["ssl_certs_dir"]
                    },

                    {
                        "properties": {
                            "proxyuser": {"$ref": "#/definitions/proxyuser"},
                            "krb_cache_path": {
                                "description": "Path to kerberos credential cache file",
                                "type": "string"
                            },
                            "krb_principal": {
                                "description": "Kerberos principal",
                                "type": "string"
                            },
                            "krb_keytab_path": {
                                "description": "Location of Kerberos keytab, e.g. FILE:<absolute_path>",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["krb_principal", "krb_keytab_path"]
                    },

                    {
                        "properties": {
                            "proxyuser": {"$ref": "#/definitions/proxyuser"}
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "use_fast_upload": {
                "description": "Use Koji's fast upload API",
                "type": "boolean",
                "default": true
            },
            "reserve_build": {
                "description": "Reserve build id and NVR through Content Generator API. If set, requires koji > 1.17.0",
                "type": "boolean",
                "default": false
            },
            "insecure_download": {
                "description": "Download data from koji insecurely",
                "type": "boolean",
                "default": false
            }
        },
        "additionalProperties": false,
        "required": ["hub_url", "root_url", "auth"]
    },
    "remote_hosts": {
        "description": "Remote-host instance",
        "type": "object",
        "properties": {
            "slots_dir": {
                "description": "Remote-host slots directory",
                "type": "string"
            },
            "memory_limit": {
                "description": "Memory limit for podman-remote build",
                "type": "string",
                "examples": ["1g", "10m"]
            },
            "podman_capabilities": {
                "description": "Use additional podman capabilities",
                "type": ["array", "null"],
                "items": {
                  "type": "string"
                },
                "examples": [null, ["CAP_SYS_CHROOT", "CAP_AUDIT_WRITE", "CAP_MKNOD"]]
            },
            "pools": {
                "description": "Pool of Remote-hosts",
                "type": "object",
                "patternProperties": {
                    "^[a-zA-Z0-9_]+$": {
                        "description": "Remote host platforms",
                        "type": "object",
                        "patternProperties": {
                            "^[a-zA-Z0-9_.-]+$": {
                                "description": "Platform specific hosts",
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "description": "User name used to SSH to host",
                                        "type": "string"
                                    },
                                    "auth": {
                                        "description": "File path to SSH private key to access host",
                                        "type": "string"
                                    },
                                    "enabled": {
                                        "description": "Whether this host can be used",
                                        "type": "boolean",
                                        "default": true
                                    },
                                    "slots": {
                                        "description": "Available slots on host",
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "socket_path": {
                                        "description": "User podman socket path",
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false,
                                "required": ["username", "auth", "enabled", "slots", "socket_path"]
                            }
                        },
                        "additionalProperties": false
                    }
                },
               "additionalProperties": false
            }
        },
        "additionalProperties": false,
        "required": ["slots_dir", "pools"]
    },
    "pnc": {
        "description": "Project Newcastle instance",
        "type": "object",
        "properties": {
            "base_api_url": {
                "description": "Project Newcastle API base url",
                "type": "string"
            },
            "get_scm_archive_path": {
                "description": "Project Newcastle API path to get scm archive for given build ID",
                "type": "string"
            },
            "get_artifact_path": {
                "description": "Project Newcastle API path to get artifact for given artifact ID",
                "type": "string"
            }
        },
        "additionalProperties": false,
        "required": ["base_api_url", "get_scm_archive_path", "get_artifact_path"]
    },
    "odcs": {
        "description": "OnDemand Compose Service (ODCS) instance",
        "type": "object",
        "properties": {
            "api_url": {
                "description": "ODCS api url, including api version",
                "type": "string"
            },
            "insecure": {
                "description": "Don't check SSL certificate for api_url",
                "type": "boolean"
            },
            "auth": {
                "description": "Authentication information",
                "type": "object",
                "anyOf": [
                    {
                        "properties": {
                            "ssl_certs_dir": {
                                "description": "Path to directory with cert file",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["ssl_certs_dir"]
                    },
                    {
                        "properties": {
                            "openidc_dir": {
                                "description": "Path to directory with token file",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["openidc_dir"]
                    },
                    {
                        "properties": {
                            "krb_keytab_path": {
                                "description": "Location of Kerberos keytab, e.g. FILE:<absolute_path>",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["krb_keytab_path"]
                    }
                ]
            },
            "signing_intents": {
                "description": "List of signing intents",
                "type": "array",
                "items": {
                    "properties": {
                      "name": {
                        "description": "signing intent name",
                        "type": "string"
                      },

                      "keys": {
                          "description": "signing intent keys",
                          "type": "array",
                          "items": {
                              "type": "string"
                          }
                      },
                      "deprecated_keys": {
                          "description": "deprecated signing intent keys",
                          "type": "array",
                          "items": {
                              "type": "string"
                          }
                      }
                    },
                    "additionalProperties": false,
                    "required": ["name", "keys"]
                }
            },
            "default_signing_intent": {
                "description": "Default signing intent",
                "type": "string"
            },
            "timeout": {
                "description": "How long in seconds to wait for requested compose to complete. Defaults to 3600",
                "type": "integer"
            }
        },
        "additionalProperties": false,
        "required": ["api_url", "auth", "signing_intents", "default_signing_intent"]
    },
    "smtp": {
        "description": "SMTP notifications",
        "type": "object",
        "properties": {
            "host": {
                "description": "SMTP host server name",
                "type": "string"
            },
            "from_address": {
                "description": "From email address in notification email",
                "type": "string"
            },
            "additional_addresses": {
                "description": "Email addresses to always send notification email",
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "error_addresses": {
                "description": "Email addresses to send notifications if no other email address can be resolved",
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "domain": {
                "description": "Domain used when constructing email addresses",
                "type": "string"
            },
            "send_to_submitter": {
                "description": "Send email notification to Koji task submitter",
                "type": "boolean"
            },
            "send_to_pkg_owner": {
                "description": "Send email notification to Koji package owner",
                "type": "boolean"
            }
        },
        "additionalProperties": false,
        "required": ["host", "from_address"]
    },
    "cachito": {
        "description": "Cachito instance",
        "type": "object",
        "properties": {
            "api_url": {
                "description": "Cachito API url",
                "type": "string"
            },
            "insecure": {
                "description": "Don't check SSL certificate for api_url",
                "type": "boolean"
            },
            "unknown_user": {
                "description": "User to set in cachito request user param in case koji user is not found",
                "type": "string",
                "default": "unknown_user"
            },
            "auth": {
                "description": "Authentication information",
                "type": "object",
                "properties": {
                    "ssl_certs_dir": {
                        "description": "Path to directory with cert file",
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "timeout": {
                "description": "How long in seconds to wait for a Cachito request completes",
                "type": "integer",
                "default": 3600
            }
        },
        "additionalProperties": false,
        "required": ["api_url", "auth"]
    },
    "artifacts_allowed_domains": {
        "description": "Domains allowed to use when fetching artifacts by url, if not specified no restrictions will be applied",
        "type": "array",
        "items": {
            "type": "string"
        }
    },
    "yum_repo_allowed_domains": {
        "description": "Domains allowed when fetching yum repo files. If not specified, no restrictions will be applied. The restriction does not apply to scratch builds",
        "type": "array",
        "items": {
            "type": "string"
        }
    },
    "image_labels": {
        "description": "Labels to be applied to container image",
        "type": "object",
        "patternProperties": {
            "^[\\w\\.-]+$": {"type": "string"}
        },
        "additionalProperties": false
    },
    "image_label_info_url_format": {
        "description": "URL format (with {label}-style substitution) for 'info' label",
        "type": "string"
    },
    "image_equal_labels": {
        "description": "Labels that are expected to be equal in value",
        "type": "array",
        "items" : {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    },
    "openshift": {
        "description": "OpenShift instance running build",
        "type": "object",
        "properties": {
            "url": {
                "description": "OpenShift url",
                "type": "string"
            },
            "insecure": {
                "description": "Don't check SSL certificate for url",
                "type": "boolean"
            },
            "auth": {
                "description": "Authentication information",
                "type": "object",
                "anyOf": [
                    {
                        "properties": {
                            "enable": {"$ref": "#/definitions/enable"},
                            "krb_cache_path": {
                                "description": "Path to kerberos credential cache file",
                                "type": "string"
                            },
                            "krb_principal": {
                                "description": "Kerberos principal",
                                "type": "string"
                            },
                            "krb_keytab_path": {
                                "description": "Location of Kerberos keytab, e.g. FILE:<absolute_path>",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["krb_principal", "krb_keytab_path"]
                    },

                    {
                        "properties": {
                            "enable": {"$ref": "#/definitions/enable"},
                            "ssl_certs_dir": {
                                "description": "Path to directory with cert, key and ca files",
                                "type": "string"
                            }
                        },
                        "additionalProperties": false,
                        "required": ["ssl_certs_dir"]
                    },

                    {
                        "properties": {
                            "enable": {"$ref": "#/definitions/enable"}
                        },
                        "additionalProperties": false
                    }
                ]
            }
        },
        "additionalProperties": false,
        "required": ["url"]
    },
    "group_manifests": {
        "description": "Create manifest list, or image index, in container registry",
        "type": "boolean",
        "default": true
    },
    "platform_descriptors": {
        "description": "Definition of supported platforms",
        "type": "array",
        "items": {
            "type": "object",
            "properties": {
                "platform": {
                    "type": "string"
                },
                "architecture": {
                    "type": "string"
                }
            },
            "additionalProperties": false
        }
    },
    "registries_organization": {"$ref": "#/definitions/organization"},
    "registries_cfg_path": {
      "description": "Path to directory containing .dockercfg for registries auth",
      "type": "string"
    },
    "registry": {
      "description": "Container registry to output images",
      "type": "object",
      "properties": {
        "url": {
          "description": "Registry URI including version",
          "type": "string"
        },
        "insecure": {
          "description": "Don't check SSL certificate for url",
          "type": "boolean"
        },
        "expected_media_types": {"$ref": "#/definitions/media_types"}
      },
      "additionalProperties": false,
      "required": ["url"]
    },
    "source_registry": {
      "description": "Default container registry to use for pulling images",
      "$ref": "#/definitions/source_registry"
    },
    "pull_registries": {
      "description": "Other container registries that may be used for pulling images",
      "type": "array",
      "items": {
        "description": "Any container registry other than the default one",
        "$ref": "#/definitions/source_registry"
      }
    },
    "yum_proxy": {
        "description": "Proxy to access yum repositories",
        "type": "string"
    },
    "skip_koji_check_for_base_image": {
        "description": "Allow base image without a related koji build (insecure)",
        "type": "boolean",
        "default": true
    },
    "deep_manifest_list_inspection": {
        "description": "If manifest list digest check fails, inspect the manifest list contents",
        "type": "boolean",
        "default": true
    },
    "fail_on_digest_mismatch": {
        "description": "Raise an error and stop build when a manifest list digest check fails",
        "type": "boolean",
        "default": true
    },
    "hide_files": {
        "description": "Hide files during build for each stage",
        "type": "object",
        "properties": {
            "tmpdir": {
                "description": "Temporary location, where files will be hidden",
                "type": "string",
                "minLength": 1
            },
            "files": {
                "description": "List of files to hide",
                "type": "array",
                "items": {
                    "type": "string",
                    "minLength": 1
                },
                "minItems": 1,
                "uniqueItems": true
            }
        },
        "additionalProperties": false,
        "required": ["tmpdir", "files"]
    },
    "sources_command": {
        "description": "Command to retrieve artifacts in lookaside cache",
        "type": "string"
    },
    "allow_multiple_remote_sources": {
        "description": "Allow using multiple remote sources",
        "type": "boolean",
        "default": false
    },
    "flatpak": {
        "description": "Flatpak specific properties",
        "type": "object",
        "properties": {
            "base_image": {
                "description": "host image used to install packages when creating a Flatpak",
                "type": "string"
            },
            "metadata": {
                "description": "how to store Flatpak metadata in the image",
                "type": "string",
                "enum": ["annotations", "labels", "both"]
            }
        },
        "additionalProperties": false
    },
    "package_comparison_exceptions": {
        "description": "List of packages that are not compared across architectures",
        "type": "array",
        "items": {
            "type": "string"
        }
    },
    "source_container": {
        "description": "Properties relating to source containers",
        "type": "object",
        "properties": {
          "limit_media_types": {
            "description": "Do not report any media types other than these",
            "allOf": [{"$ref": "#/definitions/media_types"}]
          },
          "denylist_srpms": {
              "description": "Don't include srpms specified in denylist json with key",
              "type": "object",
              "properties": {
                  "denylist_url": {
                    "description": "Url with denylist json file",
                    "type": "string"
                  },
                  "denylist_key": {
                    "description": "Key in denylist json file, with denylist sources as list (with SRPM names)",
                    "type": "string"
                  }
              },
              "required": ["denylist_url", "denylist_key"]
          },
          "denylist_sources": {
              "description": "Url with denylist yaml file, which will be used to exclude sources from cachito ",
              "type": "string"
          },
          "lookaside_cache_allowlist": {
              "description": "Url with allowlist yaml file, which allows usage of lookaside cache",
              "type": "string"
          },
          "cpu_request": {
              "description": "Openshift cpu request for build",
              "type": "string",
              "examples": ["1001m", "3000m"]
          },
          "memory_request": {
              "description": "Openshift memory request for build",
              "type": "string",
              "examples": ["1Gi", "3Gi"]
          },
          "rh_git_url": {
              "description": "Convert binary build git url to RH one",
              "type": "boolean",
              "default": false
          }
        },
        "additionalProperties": false
    },
    "operator_manifests": {
        "description": "Configuration for operator manifest bundle builds",
        "type": "object",
        "properties": {
          "allowed_registries": {
            "description": "Registries allowed to appear in pullspecs, use null to allow all",
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "examples": [null, ["registry.fedoraproject.org", "quay.io"]]
          },
          "repo_replacements": {
            "description": "Replacements for repos found in pullspecs, configured per registry",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "registry": {
                  "type": "string"
                },
                "package_mappings_url": {
                  "description": "URL of file containing repo replacement mappings",
                  "type": "string",
                  "pattern": "^http(s?)://.*$"
                }
              },
              "required": ["registry", "package_mappings_url"],
              "additionalProperties": false
            }
          },
          "registry_post_replace": {
            "description": "After looking up image digest, replace original registries",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "old": {
                  "description": "Original registry",
                  "type": "string"
                },
                "new": {
                  "description": "Replacement registry",
                  "type": "string"
                }
              },
              "required": ["old", "new"],
              "additionalProperties": false
            }
          },
          "skip_all_allow_list": {
            "description": "Koji packages allowed to use skip_all option in container.yaml, add also comment for each package about the Vault Exception ID",
            "type": ["array", "null"],
            "items": {
              "type": "string"
            },
            "examples": [null, ["centos-container", "rsyslog-container"]]
          },
          "csv_modifications": {
              "description": "Section for configuration of operator CSV modifications",
              "type": "object",
              "properties": {
                  "allowed_attributes": {
                      "description": "Attributes allowed to be modified represented as sequence of nested keys",
                      "examples": ["[[\"spec\", \"version\"], [\"metadata\", \"name\"]]"],
                      "type": "array",
                      "items": {
                          "type": "array",
                          "items": {
                              "type": "string",
                              "minItems": 1
                          }
                      }
                  }
              },
              "additionalProperties": false
          }
        },
        "required": ["allowed_registries"],
        "additionalProperties": false
    },
    "image_size_limit": {
      "description": "Define maximum uncompressed image size in bytes for binary image checked before push",
      "type": "object",
      "properties": {
        "binary_image": {
          "description": "Maximum size of binary images. Set to 0 or omit to skip the check",
          "type": "integer",
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "remote_sources_default_version": {
        "description": "Default version of remote sources resolving which will be used when user doesn't explicitly specify it",
        "type": "number",
        "minimum": 1,
        "maximum": 2
    }
  },
  "definitions": {
    "enable": {
       "description": "Enable authentication",
       "type": "boolean"
    },
    "proxyuser": {
        "description": "Login as different user",
        "type": "string"
    },
    "organization": {
        "description": "Registry organization",
        "type": "string"
    },
    "media_types": {
      "description": "Media types to be found in registry",
        "type": "array",
        "items": {
          "type": "string",
          "enum": ["application/json",
                   "application/vnd.docker.distribution.manifest.v1+json",
                   "application/vnd.docker.distribution.manifest.v2+json",
                   "application/vnd.docker.distribution.manifest.list.v2+json",
                   "application/vnd.oci.image.manifest.v1+json",
                   "application/vnd.oci.image.index.v1+json"]
        }
    },
    "source_registry": {
      "type": "object",
      "properties": {
        "url": {
          "description": "Registry url",
          "type": "string"
        },
        "insecure": {
          "description": "Don't check SSL certificate for url",
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "required": ["url"]
    },
    "builder_ca_bundle": {
        "description": "An absolute path to the custom ca-bundle certificate inside the buildroot.",
        "type": "string",
        "examples": ["/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"]
    }
  },
  "required": ["version", "koji", "openshift", "registry", "source_registry"]
}
